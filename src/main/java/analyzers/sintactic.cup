/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package analyzers;
import logic.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.mycompany.practica1.*;

//------> Codigo para el parser,variables, metodos
parser code
{:
    public String result="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexeme = s.value.toString();
        String description = "";
        int line = s.right;
        int column = s.left;
        int tipo = s.sym;
        
        System.out.println("! Error Sintactico Recuperado !");
        System.out.println("\t\tLexema: "+ lexeme);
        System.out.println("\t\tFila: "+ line);
        System.out.println("\t\tColumna: "+ column);
        System.out.println("\t\tVariable tipo: " + tipo);

        switch(tipo){
            case 2:
                description = "Se esperaba un número antes del '+'";
                break;
            case 3:
                description = "Se esperaba un número antes del '-'";
                break;
            case 4:
                description = "Se esperaba un número antes del '*'";
                break;
            case 5:
                description = "Se esperaba un '('";
                break;
            case 6:
                description = "Se esperaba una figura o 'anterior'";
                break;
            case 7:
                description = "Se esperaba un color o número";
                break;
            case 8:
                description = "Se esperaba un ')'";
                break;
            case 9:
                description = "Instrucción sin objetos anteriores";
                break;
            case 10:
                description = "Se esperaba la palabra 'animar'";
                break;
            case 11:
                description = "Se esperaba la palabra 'objeto'";
                break;
            case 12:
                description = "Se esperaba un '('";
                break;
            case 17:
                description = "Se esperaba la palabra 'graficar'";
                break;
            case 18:
                description = "Se esperaba un '('";
                break;
            case 20:
                description = "Se esperaba una coma ' , '";
            case 21:
                description = "Se esperaba un nombre o número";
                break;
            case 25:
                description = "Se esperaba 'curva' o 'línea'";
                break;
            default:
                System.out.println("Es otro error");
                description = "Caracter no esperado";
        }

        TError data = new TError(lexeme,line,column,"Sintactico",description);
        errorReport.TableErrors.add(data);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        
        System.out.println("! Error Sintactico, PANIC MODE ! ");
        System.out.println("\t\tLexema: "+lexeme);
        System.out.println("\t\tFila: "+line);
        System.out.println("\t\tColumna: "+column);

        TError data = new TError(lexeme,line,column,"Sintactico","Caracter no esperado");
        errorReport.TableErrors.add(data);
     
    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal plus,minus,times,split,paro,parc,graph,animate,object,previous,animation,
         circle,square,rectangle,line,polygon,name,color;
terminal String num, comma;

//------> declaracion de no terminales
non terminal String A,B,C,E,F,G,H;

//----> precedencia de menor a mayor 
precedence left plus, minus;
precedence left times, split;

start with F;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

A::= A:a plus A:b {:double val1= Double.parseDouble(a);
                    double val2= Double.parseDouble(b);
                    double r = val1+val2;
                    RESULT = String.valueOf(r);
                    String ocurrency = String.valueOf(a) + " + " + String.valueOf(b);
                    int line = cur_token.right;
                    int column = cur_token.left;
                    TTokens data = new TTokens("Suma", ocurrency, line, column);
                    reports.TokensList.add(data);:}
    |A:a minus A:b {:double val1= Double.parseDouble(a);
                    double val2= Double.parseDouble(b);
                    double r = val1-val2;
                    RESULT = String.valueOf(r);
                    String ocurrency = String.valueOf(a) + " - " + String.valueOf(b);
                    int line = cur_token.right;
                    int column = cur_token.left;
                    TTokens data = new TTokens("Resta", ocurrency, line, column);
                    reports.TokensList.add(data); :}
    |A:a split A:b {:double val1= Double.parseDouble(a);
                    double val2= Double.parseDouble(b);
                    double r = val1/val2;
                    RESULT = String.valueOf(r);
                    String ocurrency = String.valueOf(a) + " / " + String.valueOf(b);
                    int line = cur_token.right;
                    int column = cur_token.left;
                    TTokens data = new TTokens("División", ocurrency, line, column);
                    reports.TokensList.add(data); :}
    |A:a times A:b {:double val1= Double.parseDouble(a);
                    double val2= Double.parseDouble(b);
                    double r = val1*val2;
                    RESULT = String.valueOf(r); 
                    String ocurrency = String.valueOf(a) + " * " + String.valueOf(b);
                    int line = cur_token.right;
                    int column = cur_token.left;
                    TTokens data = new TTokens("Multiplicación", ocurrency, line, column);
                    reports.TokensList.add(data);:}
    |paro A:a {: RESULT = a; :} parc
    |num:a {: RESULT = a; :};

B::= circle paro name:nameObject comma A:posx comma A:posy comma A:numbOne comma color:colors parc G 
     {:System.out.println("Cadena aceptada (Circulo)");
      reports.ObjectsList.add("circulo");
      reports.ColorsList.add(String.valueOf(colors));
      String name = String.valueOf(nameObject);
      String color = String.valueOf(colors);
      double px = Double.parseDouble(posx);
      double py = Double.parseDouble(posy);
      double radius = Double.parseDouble(numbOne);
      circle data = new circle(name, color, px, py, radius);
      shapes.circleShapes.add(data);:}
     |square paro name:nameObject comma A:posx comma A:posy comma A:numbOne comma color:colors parc G 
     {:System.out.println("Cadena aceptada (Cuadrado)");
      reports.ObjectsList.add("cuadrado");
      reports.ColorsList.add(String.valueOf(colors));:}
     |rectangle paro name:nameObject comma A:posx comma A:posy comma A:numbOne comma A:numbTwo comma color:colors parc G 
     {:System.out.println("Cadena aceptada (Rectangulo)");
      reports.ObjectsList.add("rectangulo");
      reports.ColorsList.add(String.valueOf(colors));:}
     |line paro name:nameObject comma A:posx comma A:posy comma A:numbOne comma A:numbTwo comma color:colors parc G 
     {:System.out.println("Cadena aceptada (Linea)");
      reports.ObjectsList.add("linea");
      reports.ColorsList.add(String.valueOf(colors));:}
     |error B;

C::= polygon paro name comma A comma A comma A comma A comma A comma color:colors parc G 
     {:System.out.println("Cadena aceptada (Poligono)");
       reports.ObjectsList.add("poligono");
       reports.ColorsList.add(String.valueOf(colors));:}
    |error C;

E::= graph B
    |graph C;

F::= E animate object previous paro animation:anim comma A comma A comma A parc H 
    {:System.out.println("Instrucciones completas correctas");
      reports.AnimationsList.add(String.valueOf(anim));:}
    |error F;

G::= E
    | /* Lambda */;

H::= F
    | /* Lambda */;